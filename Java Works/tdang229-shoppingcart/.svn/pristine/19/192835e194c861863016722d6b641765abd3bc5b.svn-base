/*
 * TCSS 305 – Autumn 2014 Assignment 2 - ShoppingCart
 */

package model;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Objects;

/**
 * This class stores data including name, price, bulk quantity, and bulk price
 * of a single item.
 * 
 * @author Trung Dang
 * @version 11 October, 2014
 */
public final class Item {

    /** The name of a single item. */
    private final String myItemName;

    /** The price of that single item. */
    private final BigDecimal myItemPrice;

    /** The bulk quantity of that item to be eligible for bulk price. */
    private int myBulkQuantity;

    /** The bulk price of that item. */
    private BigDecimal myBulkPrice;

    /**
     * This constructor initializes the state of the item object.
     * 
     * @param theName the name of one single item
     * @param thePrice the price of that single item
     */
    public Item(final String theName, final BigDecimal thePrice) {
        myItemName = theName;
        myItemPrice = thePrice;
    }

    /**
     * This constructor initializes the state of the item object with a bulk
     * order.
     * 
     * @param theName the name of one single item
     * @param thePrice the price of that single item
     * @param theBulkQuantity the bulk quantity to be eligible for bulk price
     * @param theBulkPrice the bulk price of the item
     */
    public Item(final String theName, final BigDecimal thePrice, final int theBulkQuantity,
                final BigDecimal theBulkPrice) {
        myItemName = theName;
        myItemPrice = thePrice;
        myBulkQuantity = theBulkQuantity;
        myBulkPrice = theBulkPrice;
    }

    /**
     * @param theQuantity the total quantity a customer orders
     * @return the total price for this item's order
     */
    public BigDecimal calculateItemTotal(final int theQuantity) {
        final BigDecimal bulkTotal =
                        myBulkPrice.multiply(BigDecimal.valueOf(theQuantity / myBulkQuantity));
        final BigDecimal leftOvers =
                        myItemPrice.multiply(BigDecimal.valueOf(theQuantity % myBulkQuantity));
        return bulkTotal.add(leftOvers);
    }

    /**
     * {@inheritDoc}
     * 
     * @return a string with format as follows: <br>
     *         myItemName, myItemPrice (BulkQuantity for BulkPrice).
     */
    @Override
    public String toString() {
        final NumberFormat nF = NumberFormat.getCurrencyInstance();
        final StringBuilder sB = new StringBuilder();
        sB.append(myItemName);
        sB.append(", ");
        sB.append(nF.format(myItemPrice));
        if (myBulkQuantity != 0 && myBulkPrice != null) {
            sB.append(" (");
            sB.append(myBulkQuantity);
            sB.append(" for ");
            sB.append(nF.format(myBulkPrice));
            sB.append(')');
        }
        return sB.toString();
    }

    /**
     * Return true if the two items have identical name, price, bulk quantity
     * and bulk price.
     * 
     * @param theOther the object passed to the method for comparison
     * @return result true when items have the same name, price, bulk quantity,
     *         and bulk price
     */
    @Override
    public boolean equals(final Object theOther) {
        final boolean result = false;
        if (theOther != null && theOther.getClass() == this.getClass()) {
            final Item otherItem = (Item) theOther;
            return this.myItemName.equals(otherItem.myItemName)
                   && (this.myItemPrice.compareTo(otherItem.myItemPrice) == 0)
                   && (this.myBulkQuantity == otherItem.myBulkQuantity)
                   && (this.myBulkPrice).compareTo(otherItem.myBulkPrice) == 0;
        }
        return result;
    }

    /**
     * @return f
     */
    @Override
    public int hashCode() {

        return Objects.hash(myItemName, myItemPrice, myBulkQuantity, myBulkPrice);

    }

}
